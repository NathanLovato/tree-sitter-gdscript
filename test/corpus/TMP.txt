============================================
TMP: Match: Simple conditional expression
============================================

match 0:
	0 if true else 2:
		pass

---

(source
  (match_statement
    value: (integer)
    body: (match_body
      (pattern_section
        (conditional_expression
          left: (integer)
          condition: (true)
          right: (integer))
        body: (body
          (pass_statement))))))

============================================
TMP: Match: Nested conditional expressions with identifiers
============================================

match value:
	x if condition else y:
		print("matched")
	a if b else c if d else e:
		print("complex ternary")

---

(source
  (match_statement
    value: (identifier)
    body: (match_body
      (pattern_section
        (conditional_expression
          left: (identifier)
          condition: (identifier)
          right: (identifier))
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (string))))))
      (pattern_section
        (conditional_expression
          left: (identifier)
          condition: (identifier)
          right: (conditional_expression
            left: (identifier)
            condition: (identifier)
            right: (identifier)))
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (string)))))))))

============================================
TMP: Match: Annotations within match statements
============================================

match 1:
	_:
		print(0)
	@warning_ignore("unreachable_pattern")
	1:
		print(1)

---

(source
  (match_statement
    value: (integer)
    body: (match_body
      (pattern_section
        (identifier)
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (integer))))))
      (annotation
          (identifier)
          arguments: (arguments
            (string)))
      (pattern_section
        (integer)
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (integer)))))))))

============================================
TMP: Functions: Type inference in function parameters
============================================

func set_avatar_at(at := AvatarAt.LEFT) -> void:
	pass

---

(source
  (function_definition
    name: (name)
    parameters: (parameters
      (typed_default_parameter
        (identifier)
        type: (inferred_type)
        value: (attribute
          (identifier)
          (identifier))))
    return_type: (type
      (identifier))
    body: (body
      (pass_statement))))

============================================
TMP: Functions: Type inference in multiple function parameters
============================================

func test(x := 10, y := "hello"):
	pass

---
(source
  (function_definition
    name: (name)
    parameters: (parameters
      (typed_default_parameter
        (identifier)
        type: (inferred_type)
        value: (integer))
      (typed_default_parameter
        (identifier)
        type: (inferred_type)
        value: (string)))
    body: (body
      (pass_statement))))

============================================
TMP: Match: conditional expression, annotation, and call
============================================

match get_value():
	result if run_check() else fallback:
		@warning_ignore("test")
		handle_value()

---

(source
  (match_statement
    value: (call
      (identifier)
      arguments: (arguments))
    body: (match_body
      (pattern_section
        (conditional_expression
          left: (identifier)
          condition: (call
            (identifier)
            arguments: (arguments))
          right: (identifier))
        body: (body
          (annotation
            (identifier)
            arguments: (arguments
              (string)))
          (expression_statement
            (call
              (identifier)
              arguments: (arguments))))))))


============================================
Callables: Calling a callable named tool
============================================

var tool = Callable()

func test():
	tool.call()

---

(source
  (variable_statement
    name: (name)
    value: (call
      (identifier)
      arguments: (arguments)))
  (function_definition
    name: (name)
    parameters: (parameters)
    body: (body
      (expression_statement
        (attribute
          (identifier)
          (attribute_call
            (identifier)
            arguments: (arguments)))))))
